
export const chatSession = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate 27 MCQs on 'React Native' in JSON format, categorized into three difficulty levels: Easy, Medium, and Hard. Each level has 3 waves, each wave contains 3 questions.\n{\n  \"React Native Tower\": {\n    \"Easy\": [\n      {\n        \"wave\": 1,\n        \"questions\": [\n          {\n            \"question\": \"<question_text>\",\n            \"options\": [\"<option_1>\", \"<option_2>\", \"<option_3>\", \"<option_4>\"],\n            \"correct_answer\": \"<correct_option>\"\n          }\n        ]\n      }\n    ],\n    \"Medium\": [...],\n    \"Hard\": [...]\n  }\n}\nEnsure increasing difficulty per level and engaging, gamified questions. Output only valid JSON." },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"React Native Tower\": {\n    \"Easy\": [\n      {\n        \"wave\": 1,\n        \"questions\": [\n          {\n            \"question\": \"Welcome, Trainee! What's the core component library used in React Native for building UIs?\",\n            \"options\": [\"HTML\", \"DOM\", \"React Native Core Components\", \"CSS\"],\n            \"correct_answer\": \"React Native Core Components\"\n          },\n          {\n            \"question\": \"First Step! Which of these is NOT a core component in React Native?\",\n            \"options\": [\"View\", \"Text\", \"Image\", \"Div\"],\n            \"correct_answer\": \"Div\"\n          },\n          {\n            \"question\": \"Nice Start! How do you typically style components in React Native?\",\n            \"options\": [\"Inline CSS\", \"External CSS files\", \"StyleSheet API\", \"SASS\"],\n            \"correct_answer\": \"StyleSheet API\"\n          }\n        ]\n      },\n      {\n        \"wave\": 2,\n        \"questions\": [\n          {\n            \"question\": \"Moving On! What command is used to initialize a new React Native project?\",\n            \"options\": [\"create-react-app\", \"npx react-native init\", \"npm start\", \"yarn add react-native\"],\n            \"correct_answer\": \"npx react-native init\"\n          },\n          {\n            \"question\": \"Great Job! What's the purpose of the 'setState' method in React Native?\",\n            \"options\": [\"To define a function\", \"To update the component's state and trigger a re-render\", \"To create a new component\", \"To style a component\"],\n            \"correct_answer\": \"To update the component's state and trigger a re-render\"\n          },\n          {\n            \"question\": \"Almost there! Which property is used to make a component visible or invisible?\",\n            \"options\": [\"display\", \"visibility\", \"opacity\", \"hidden\"],\n            \"correct_answer\": \"display\"\n          }\n        ]\n      },\n      {\n        \"wave\": 3,\n        \"questions\": [\n          {\n            \"question\": \"Final Step! What is JSX?\",\n            \"options\": [\"A JavaScript library\", \"A CSS preprocessor\", \"A syntax extension to JavaScript\", \"A database query language\"],\n            \"correct_answer\": \"A syntax extension to JavaScript\"\n          },\n          {\n            \"question\": \"You're almost done! What is the purpose of the 'ScrollView' component?\",\n            \"options\": [\"To create a fixed-size container\", \"To enable scrolling of content that overflows the container\", \"To display images\", \"To handle touch events\"],\n            \"correct_answer\": \"To enable scrolling of content that overflows the container\"\n          },\n          {\n            \"question\": \"Level Cleared! Which tool do you use for debugging in React Native?\",\n            \"options\": [\"Chrome DevTools\", \"React Native Debugger\", \"Both Chrome DevTools and React Native Debugger\", \"VSCode Debugger\"],\n            \"correct_answer\": \"Both Chrome DevTools and React Native Debugger\"\n          }\n        ]\n      }\n    ],\n    \"Medium\": [\n      {\n        \"wave\": 1,\n        \"questions\": [\n          {\n            \"question\": \"A challenger approaches! What is the primary difference between 'FlatList' and 'ScrollView'?\",\n            \"options\": [\"FlatList is for horizontal scrolling, ScrollView is for vertical scrolling\", \"FlatList is more performant for large lists\", \"ScrollView is easier to use\", \"They are interchangeable\"],\n            \"correct_answer\": \"FlatList is more performant for large lists\"\n          },\n          {\n            \"question\": \"Enemies are approaching! What is the role of the 'SafeAreaView' component?\",\n            \"options\": [\"To provide a default background color\", \"To render content in the safe area of the device screen\", \"To create a responsive layout\", \"To handle touch events\"],\n            \"correct_answer\": \"To render content in the safe area of the device screen\"\n          },\n          {\n            \"question\": \"Careful Now! What are Props in React Native?\",\n            \"options\": [\"A way to manage state\", \"Data passed from a parent component to a child component\", \"A type of event handler\", \"A styling method\"],\n            \"correct_answer\": \"Data passed from a parent component to a child component\"\n          }\n        ]\n      },\n      {\n        \"wave\": 2,\n        \"questions\": [\n          {\n            \"question\": \"Dodge this! How can you pass data between screens using React Navigation?\",\n            \"options\": [\"Using global variables\", \"Using 'props.history.push'\", \"Using 'route.params'\", \"Using localStorage\"],\n            \"correct_answer\": \"Using 'route.params'\"\n          },\n          {\n            \"question\": \"Don't get hit! What is the purpose of using 'useEffect' hook?\",\n            \"options\": [\"To render components\", \"To perform side effects in functional components\", \"To define styles\", \"To create a class component\"],\n            \"correct_answer\": \"To perform side effects in functional components\"\n          },\n          {\n            \"question\": \"Almost there! Which package is commonly used for managing state in larger React Native applications?\",\n            \"options\": [\"Redux\", \"MobX\", \"Context API\", \"All of the above\"],\n            \"correct_answer\": \"All of the above\"\n          }\n        ]\n      },\n      {\n        \"wave\": 3,\n        \"questions\": [\n          {\n            \"question\": \"Almost done! What is the role of native modules in React Native?\",\n            \"options\": [\"To write UI components\", \"To access platform-specific APIs\", \"To manage application state\", \"To handle network requests\"],\n            \"correct_answer\": \"To access platform-specific APIs\"\n          },\n          {\n            \"question\": \"Few more steps! How do you handle user input (e.g., text input) in React Native?\",\n            \"options\": [\"Using the 'onChange' event\", \"Using the 'onPress' event\", \"Using the 'onSubmit' event\", \"Using the 'onChangeText' event\"],\n            \"correct_answer\": \"Using the 'onChangeText' event\"\n          },\n          {\n            \"question\": \"Level Cleared! What's the main benefit of using TypeScript with React Native?\",\n            \"options\": [\"Improved performance\", \"Static type checking and better code maintainability\", \"Smaller bundle size\", \"Easier deployment\"],\n            \"correct_answer\": \"Static type checking and better code maintainability\"\n          }\n        ]\n      }\n    ],\n    \"Hard\": [\n      {\n        \"wave\": 1,\n        \"questions\": [\n          {\n            \"question\": \"Incoming Boss! What is the purpose of using bridge in React Native?\",\n            \"options\": [\"To connect two React Native components\", \"To enable communication between JavaScript and native code\", \"To create animations\", \"To handle navigation\"],\n            \"correct_answer\": \"To enable communication between JavaScript and native code\"\n          },\n          {\n            \"question\": \"Here Comes the Pain! Explain the concept of CodePush in React Native.\",\n            \"options\": [\"A way to manage app secrets\", \"A service that enables developers to deploy mobile app updates directly to users' devices\", \"A tool for creating native modules\", \"A debugging tool\"],\n            \"correct_answer\": \"A service that enables developers to deploy mobile app updates directly to users' devices\"\n          },\n          {\n            \"question\": \"Dodge the fire! What are the advantages of using React Native's Fast Refresh?\",\n            \"options\": [\"Faster build times\", \"Instant feedback on changes without losing component state\", \"Smaller bundle size\", \"Automatic code formatting\"],\n            \"correct_answer\": \"Instant feedback on changes without losing component state\"\n          }\n        ]\n      },\n      {\n        \"wave\": 2,\n        \"questions\": [\n          {\n            \"question\": \"Don't get burned! How do you implement push notifications in React Native?\",\n            \"options\": [\"Using native modules only\", \"Using a third-party library like Firebase Cloud Messaging (FCM) or Apple Push Notification service (APNs)\", \"Using React Native's built-in push notification API\", \"By manually creating sockets\"],\n            \"correct_answer\": \"Using a third-party library like Firebase Cloud Messaging (FCM) or Apple Push Notification service (APNs)\"\n          },\n          {\n            \"question\": \"This is going to hurt! What is the benefit of using Hermes in React Native?\",\n            \"options\": [\"Improved app performance through optimized JavaScript execution\", \"Automatic code splitting\", \"Simplified debugging process\", \"Better support for older devices\"],\n            \"correct_answer\": \"Improved app performance through optimized JavaScript execution\"\n          },\n          {\n            \"question\": \"Almost there! How can you optimize images in React Native for performance?\",\n            \"options\": [\"By using large, uncompressed images\", \"By using the 'resizeMode' prop and appropriate image formats\", \"By using inline styles\", \"By disabling image caching\"],\n            \"correct_answer\": \"By using the 'resizeMode' prop and appropriate image formats\"\n          }\n        ]\n      },\n      {\n        \"wave\": 3,\n        \"questions\": [\n          {\n            \"question\": \"Almost done! Explain the architecture of Flipper and its benefits for React Native development.\",\n            \"options\": [\"A UI library for React Native\", \"A debugging platform with tools for inspecting logs, network requests, and layout\", \"A build automation tool\", \"A testing framework\"],\n            \"correct_answer\": \"A debugging platform with tools for inspecting logs, network requests, and layout\"\n          },\n          {\n            \"question\": \"Push through! How would you handle background tasks in React Native?\",\n            \"options\": [\"By using setInterval\", \"Using a native module with platform-specific background task APIs\", \"Using setTimeout\", \"By spawning a new thread in JavaScript\"],\n            \"correct_answer\": \"Using a native module with platform-specific background task APIs\"\n          },\n          {\n            \"question\": \"Level Cleared! You are a React Native Master! What are the key considerations when choosing between Expo and React Native CLI?\",\n            \"options\": [\"Expo is better for complex native functionalities, React Native CLI is easier to start with.\", \"Expo is faster for initial development and simpler projects, React Native CLI provides greater flexibility and control\", \"They are interchangeable\", \"React Native CLI requires a Mac\"],\n            \"correct_answer\": \"Expo is faster for initial development and simpler projects, React Native CLI provides greater flexibility and control\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```" },
      ],
    },
  ],
});

const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
console.log(result.response.text());